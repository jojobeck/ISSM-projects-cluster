
steps = [1,2,3];
steps = [2];
% cycle =1;
cycle =3;

md = loadmodel('./../Models/ISMIP6Antarctica_HO_deltabest.mat');
base=find(md.mesh.vertexonbase);   
ice = md.mask.ice_levelset<0;% apperently still needed for plotting 
tit = ['init best HO'];
for num=1:cycle,
    disp(num2str(num));
    pref = ['Cycle', num2str(num),'_'];
    % mdname = ['./../Models/',pref, 'Inversion2HO.mat'];
    mdname = ['./../Models/',pref, 'Inversion2B.mat'];
    % mdname = ['./../Models/',pref, 'Inversion2HO.mat'];
    mdnum = loadmodel(mdname);
    eval(sprintf('md%d = mdnum;',num) );
    eval(sprintf('tit%d = pref;',num) );
    eval(sprintf('base%d=find(mdnum.mesh.vertexonbase);',num));   
    eval(sprintf('ice%d=mdnum.mask.ice_levelset <0;',num));   

end


org=organizer('steps',steps, 'color', '34;47;2'); 
% clear steps;


% plot friction coefficient 
if perform(org,'PlotFriction'),% {{{ 

    for num=1:cycle,
        if num ==1;
            diff = md1.results.StressbalanceSolution.FrictionCoefficient(base1)-md.results.StressbalanceSolution.FrictionCoefficient(base);
            tito = [tit1 ' - ' tit];
        else
            disp(num2str(num));
            eval(sprintf('diff%d = md%d.results.StressbalanceSolution.FrictionCoefficient(base%d)-md%d.results.StressbalanceSolution.FrictionCoefficient(base%d);',num -1,num ,num ,num-1,num-1));
            eval(sprintf("tito%d = [tit%d ' - ' tit%d];",num -1,num,num-1));
        end

    end
    plotmodel(md,'figure',1,...
    'data',md.results.StressbalanceSolution.FrictionCoefficient(base),'mask',ice,'title',tit,...
    'data',md1.results.StressbalanceSolution.FrictionCoefficient(base1),'mask',ice1,'title',tit1,...
    'data',md2.results.StressbalanceSolution.FrictionCoefficient(base2),'mask',ice2,'title',tit2,...
    'data',md3.results.StressbalanceSolution.FrictionCoefficient(base3),'mask',ice3,'title',tit3,...
    'colorbar#all','on',...
    'caxis#all',([0,500]),...
    'view#all',2);
    c_lim=50;
    C=redwhiteblue(-c_lim,c_lim);
    plotmodel(md,'figure',2,...
    'data',diff,'mask',ice,'title',tito,...
    'data',diff1,'mask',ice1,'title',tito1,...
    'data',diff2,'mask',ice2,'title',tito2,...
    'caxis#all',([-c_lim,c_lim]),...
    'colormap#all',C,...
    'colorbar#all','on',...
    'view#all',2);
end% }}}
if perform(org,'PlotVelocity'),% {{{ 
    surf=find(md.mesh.vertexonsurface);   
    mds = md.collapse();

    areas  =GetAreas(mds.mesh.elements,mds.mesh.x,mds.mesh.y);

    ice_surf = md.mask.ice_levelset(surf)<0;% fore ice calculatin only on surface
    diff = md.results.StressbalanceSolution.Vel(surf)-md.inversion.vel_obs(surf);
    rmse_area = sqrt( sum( areas(ice_surf)./sum(areas(ice_surf)).*( diff(ice_surf).^2) ) );
    tito = ['modl-obs .HO init Vel w. RMSE' , num2str(rmse_area)];

    for num=1:cycle,
        eval(sprintf('diff%d = md%d.results.StressbalanceSolution.Vel(surf)-md.inversion.vel_obs(surf);',num,num));
        eval(sprintf('rmse_area%d = sqrt( sum( areas(ice_surf)./sum(areas(ice_surf)).*( diff%d(ice_surf).^2) ) );',num,num));
        eval(sprintf("tito%d = ['modl-obs.Vel Cycle-%d w. RMSE' , num2str(rmse_area%d)];",num,num,num));
    end

    plotmodel(md,'figure',3,...
    'data',md.inversion.vel_obs(surf),'mask',ice,'title',['observed vel'],...
     'data',md.results.StressbalanceSolution.Vel(surf),'mask',ice,'title',['Modeled Velocity' tit],...
     'data',md1.results.StressbalanceSolution.Vel(surf),'mask',ice,'title',['Modeled Velocity' tit1],...
     'data',md2.results.StressbalanceSolution.Vel(surf),'mask',ice,'title',['Modeled Velocity' tit2],...
     'data',md3.results.StressbalanceSolution.Vel(surf),'mask',ice,'title',['Modeled Velocity' tit3],...
     'colorbar#all','on','colorbartitle#all','(m/yr)',...
     'caxis#all',([0.5,4000]),...
     'log#all',10,...
    'view#all',2);

    C=redwhiteblue(-200,200);
    plotmodel(md,'figure',4,...
    'data',diff,'mask',ice,'title',tito,...
    'data',diff1,'mask',ice,'title',tito1,...
    'data',diff2,'mask',ice,'title',tito2,...
    'data',diff3,'mask',ice,'title',tito3,...
    'caxis#all',([-200,200]),...
    'colormap#all',C,...
     'colorbar#all','on','colorbartitle#all','(m/yr)',...
    'view#all',2);
end% }}}
if perform(org,'Plotemperature'),% {{{ 
    mds = md.collapse();
    ice_surf = mds.mask.ice_levelset<0;% fore ice calculation only on surface

    for num=1:cycle,
        eval(sprintf('diff%d = md%d.collapse.initialization.temperature-md.collapse.initialization.temperature;',num,num)); 
        eval(sprintf("tito%d = ['modeled Cycle-%d - HO init,' ];",num,num));
    end


    for num=1:cycle,
        if num ==1;
            diff_delta =  md1.collapse.initialization.temperature-md.collapse.initialization.temperature;
            titod = [tit1 ' - ' tit];
        else
            disp(num2str(num));
            eval(sprintf('diff_delta%d = md%d.collapse.initialization.temperature - md%d.collapse.initialization.temperature;',num-1,num,num-1));
            eval(sprintf("titod%d = [tit%d ' - ' tit%d];",num -1,num,num-1));
        end
    end
    plotmodel(mds,'figure',5,...
    'data',md.collapse.initialization.temperature,'mask',ice_surf,'title',tit,...
    'data',md1.collapse.initialization.temperature,'mask',ice_surf,'title',tit1,...
    'data',md1.collapse.initialization.temperature,'mask',ice_surf,'title',tit2,...
    'data',md3.collapse.initialization.temperature,'mask',ice_surf,'title',tit3,...
    'caxis#all',([220,273.15]),...
     'colorbar#all','on','colorbartitle#all','T(K)')

    C=redwhiteblue(-10,10);
    plotmodel(mds,'figure',6,...
    'data',diff1,'mask',ice_surf,'title',tito1,...
    'data',diff2,'mask',ice_surf,'title',tito2,...
    'data',diff3,'mask',ice_surf,'title',tito3,...
    'caxis#all',([-10,10]),...
    'colormap#all',C,...
     'colorbar#all','on','colorbartitle#all','\Delta T(K)',...
    'view#all',2);
    C=redwhiteblue(-5,5);
    plotmodel(mds,'figure',7,...
    'data',diff_delta,'mask',ice_surf,'title',titod,...
    'data',diff_delta1,'mask',ice_surf,'title',titod1,...
    'data',diff_delta2,'mask',ice_surf,'title',titod2,...
    'caxis#all',([-5,5]),...
    'colormap#all',C,...
     'colorbar#all','on','colorbartitle#all','\Delta T(K)',...
    'view#all',2);
end% }}}
